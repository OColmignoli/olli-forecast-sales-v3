trigger:
  - main

variables:
  # Azure Resource Manager connection
  azureSubscription: 'OLLI-Azure-Connection'
  
  # Web app name
  webAppName: 'olli-forecast-sales'
  
  # Environment name
  environmentName: 'production'
  
  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    # Build and test backend
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.9'
        addToPath: true
        
    - script: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
      displayName: 'Install Python dependencies'
      
    - script: |
        python -m pytest tests/
      displayName: 'Run Python tests'
      
    # Build and test frontend
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'
      
    - script: |
        cd src/web/frontend
        npm install
        npm run build
      displayName: 'Build React app'
      
    # Archive backend
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/backend.zip'
        replaceExistingArchive: true
        
    # Archive frontend
    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/src/web/frontend/build'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/frontend.zip'
        replaceExistingArchive: true
        
    - publish: $(Build.ArtifactStagingDirectory)
      artifact: drop

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: Deploy
    displayName: Deploy
    environment: $(environmentName)
    pool:
      vmImage: $(vmImageName)
    strategy:
      runOnce:
        deploy:
          steps:
          # Deploy backend to Azure Web App
          - task: AzureWebApp@1
            inputs:
              azureSubscription: $(azureSubscription)
              appName: $(webAppName)-api
              package: '$(Pipeline.Workspace)/drop/backend.zip'
              appType: 'webApp'
              
          # Deploy frontend to Azure Static Web Apps
          - task: AzureStaticWebApp@0
            inputs:
              azureSubscription: $(azureSubscription)
              app_location: '/src/web/frontend'
              api_location: '/api'
              output_location: 'build'
